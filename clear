[1mdiff --git a/edge/grid.py b/edge/grid.py[m
[1mindex b133da1..353e649 100755[m
[1m--- a/edge/grid.py[m
[1m+++ b/edge/grid.py[m
[36m@@ -86,17 +86,18 @@[m [mif __name__ == '__main__':[m
     #?-----待解决：[m
     #?----- 1.有点的网格和无点的网格之间的差值如何计算？[m
     #!--------------------------高程[m
[31m-    height_of_grround = -1.30 #设定一个地面高度给无点的网格[m
[32m+[m[32m    #!可以直接使用points_of_grids，减少两次循环复杂度[m
[32m+[m[32m    height_of_ground = -1.30 #设定一个地面高度给无点的网格[m
     num_of_grids_contain_points = 0 #记录含有点的网格的数量[m
     height_of_grids = np.zeros((grid_size_x,grid_size_y))[m
     for i in range(grid_size_x):[m
         for j in range(grid_size_y):[m
             num_point_in_grid = int(num_of_points[i,j]) #该网格内点的数量[m
             if num_point_in_grid==0: #如果点的数量为0,则跳过[m
[31m-                height_of_grids[i,j] = height_of_grround[m
[32m+[m[32m                height_of_grids[i,j] = height_of_ground[m
                 continue[m
             num_of_grids_contain_points +=1[m
[31m-            height_of_grids[i,j] = np.sum(points_of_grids[i,j,:num_point_in_grid,2])/num_point_in_grid[m
[32m+[m[32m            height_of_grids[i,j] = np.sum(points_of_grids[i,j,:num_point_in_grid,2])/num_point_in_grid #单元格内部的平均高度[m
 [m
     #------------------------计算相邻网格之间的高程差，沿x轴之间的高程差较小，y轴之间的高程差较大的网格[m
 [m
[36m@@ -136,24 +137,6 @@[m [mif __name__ == '__main__':[m
             else:[m
                 raise KeyError('wrong index!')[m
 [m
[31m-[m
[31m-[m
[31m-[m
[31m-    #------------------------先获得平均高度，然后计算每个网格和平均高度之间的差值，没有点的网格高度差为0[m
[31m-[m
[31m-    # avg_height_of_grid = np.sum(height_of_grids)/num_of_grids_contain_points #计算所有网格的平均高度[m
[31m-[m
[31m-    # # print(num_of_grids_contain_points)[m
[31m-    # # print(avg_height_of_grid)[m
[31m-[m
[31m-    # #计算有点的网格与平均高度之间的差值[m
[31m-    # for i in range(grid_size_x):[m
[31m-    #     for j in range(grid_size_y):[m
[31m-    #         num_point_in_grid = int(num_of_points[i,j]) #该网格内点的数量[m
[31m-    #         if num_point_in_grid==0: #如果点的数量为0,则跳过[m
[31m-    #             continue[m
[31m-    #         height_of_grids[i,j] = abs(height_of_grids[i,j]-avg_height_of_grid)[m
[31m-[m
     #!--------------------------计算每个网格高度的方差和均值[m
     mean,var = mean_and_var_of_grids(num_of_points,points_of_grids)[m
 [m
[36m@@ -166,53 +149,50 @@[m [mif __name__ == '__main__':[m
 [m
     #!--------------------------与邻近网格连续性[m
 [m
[32m+[m[32m    #!各特征的结合方式！[m
 [m
     #todo------------------------------绘制3d柱状图-------------------------------------[m
[31m-    # #构造需要显示的值[m
[31m-    # Y=np.arange(0, grid_size_x, step=1)#X轴的坐标[m
[31m-    # X=np.arange(0, grid_size_y, step=1)#Y轴的坐标[m
[31m-    # xx, yy=np.meshgrid(X, Y)#网格化坐标[m
[31m-    # X, Y=xx.ravel(), yy.ravel()#矩阵扁平化[m
[31m-    # bottom=np.zeros_like(Y)#设置柱状图的底端位值[m
[31m-    # width=height=1#每一个柱子的长和宽[m
[31m-    # num_of_points = num_of_points.ravel()[m
[31m-[m
[31m-    # #绘图设置[m
[31m-    # fig=plt.figure()[m
[31m-    # ax=fig.gca(projection='3d')#三维坐标轴[m
[31m-    # ax.bar3d(X, Y, bottom, width, height, num_of_points, shade=True)#[m
[31m-    # #坐标轴设置[m
[31m-    # ax.set_xlabel('X')[m
[31m-    # ax.set_ylabel('Y')[m
[31m-    # ax.set_zlabel('num_of_points')[m
[31m-    # plt.show()[m
[32m+[m[32m    #构造需要显示的值[m
[32m+[m[32m    Y=np.arange(0, grid_size_x, step=1)#X轴的坐标[m
[32m+[m[32m    X=np.arange(0, grid_size_y, step=1)#Y轴的坐标[m
[32m+[m[32m    xx, yy=np.meshgrid(X, Y)#网格化坐标[m
[32m+[m[32m    X, Y=xx.ravel(), yy.ravel()#矩阵扁平化[m
[32m+[m[32m    bottom=np.zeros_like(Y)#设置柱状图的底端位值[m
[32m+[m[32m    width=height=1#每一个柱子的长和宽[m
[32m+[m[32m    num_of_points = num_of_points.ravel()[m
[32m+[m
[32m+[m[32m    #绘图设置[m
[32m+[m[32m    fig=plt.figure()[m
[32m+[m[32m    ax=fig.gca(projection='3d')#三维坐标轴[m
[32m+[m[32m    ax.bar3d(X, Y, bottom, width, height, num_of_points, shade=True)#[m
[32m+[m[32m    #坐标轴设置[m
[32m+[m[32m    ax.set_xlabel('X')[m
[32m+[m[32m    ax.set_ylabel('Y')[m
[32m+[m[32m    ax.set_zlabel('num_of_points')[m
[32m+[m[32m    plt.show()[m
 [m
     #todo------------------------------绘制灰度图----------------------------------------[m
 [m
     # cv2.imshow('num_of_pointsimage', num_of_points)[m
[31m-    # cv2.imwrite('/media/yhserver/DATA1/point_cloud/tool_pcd/num_of_points.jpg', num_of_points)[m
[31m-    # cv2.waitKey(-1)[m
[31m-    # cv2.destroyAllWindows()[m
[31m-[m
[31m-[m
[31m-    # cv2.imshow('height_of_gridsimage', height_of_grids)[m
[31m-    # cv2.imwrite('/media/yhserver/DATA1/point_cloud/tool_pcd/height_of_grids.jpg', height_of_grids)[m
[32m+[m[32m    # cv2.imwrite('/home/cyr/Documents/cppProject/LidarProjects/Lidar/edge/graymap/num_of_points.jpg', num_of_points)[m
     # cv2.waitKey(-1)[m
     # cv2.destroyAllWindows()[m
 [m
 [m
     # cv2.imshow('d_value_of_height_y', d_value_of_height_y)[m
[31m-    # cv2.imwrite('/media/yhserver/DATA1/point_cloud/tool_pcd/d_value_of_height_y.jpg', d_value_of_height_y)[m
[32m+[m[32m    # cv2.imwrite('/home/cyr/Documents/cppProject/LidarProjects/Lidar/edge/graymap/d_value_of_height_y.jpg', d_value_of_height_y)[m
     # cv2.waitKey(-1)[m
     # cv2.destroyAllWindows()[m
 [m
     # cv2.imshow('d_value_of_height_x', d_value_of_height_x)[m
[31m-    # cv2.imwrite('/media/yhserver/DATA1/point_cloud/tool_pcd/d_value_of_height_x.jpg', d_value_of_height_x)[m
[32m+[m[32m    # cv2.imwrite('/home/cyr/Documents/cppProject/LidarProjects/Lidar/edge/graymap/d_value_of_height_x.jpg', d_value_of_height_x)[m
     # cv2.waitKey(-1)[m
     # cv2.destroyAllWindows()[m
 [m
 [m
[31m-    cv2.imshow('var*100', var*100)[m
[31m-    cv2.imwrite('/media/yhserver/DATA1/point_cloud/tool_pcd/var_100.jpg', var)[m
[31m-    cv2.waitKey(-1)[m
[31m-    cv2.destroyAllWindows()[m
[32m+[m[32m    # cv2.imshow('var*100', var*100)[m
[32m+[m[32m    # cv2.imwrite('/home/cyr/Documents/cppProject/LidarProjects/Lidar/edge/graymap/var_100.jpg', var)[m
[32m+[m[32m    # cv2.waitKey(-1)[m
[32m+[m[32m    # cv2.destroyAllWindows()[m
[41m+[m
[41m+    [m
